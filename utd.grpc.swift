//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: utd.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Hackutd_recycleTestEchoCall: ClientCallUnary {}

fileprivate final class Hackutd_recycleTestEchoCallBase: ClientCallUnaryBase<Hackutd_Status, Hackutd_Reply>, Hackutd_recycleTestEchoCall {
  override class var method: String { return "/hackutd.recycle/TestEcho" }
}


/// Instantiate Hackutd_recycleServiceClient, then call methods of this protocol to make API calls.
internal protocol Hackutd_recycleService: ServiceClient {
  /// Synchronous. Unary.
  func testEcho(_ request: Hackutd_Status) throws -> Hackutd_Reply
  /// Asynchronous. Unary.
  func testEcho(_ request: Hackutd_Status, completion: @escaping (Hackutd_Reply?, CallResult) -> Void) throws -> Hackutd_recycleTestEchoCall

}

internal final class Hackutd_recycleServiceClient: ServiceClientBase, Hackutd_recycleService {
  /// Synchronous. Unary.
  internal func testEcho(_ request: Hackutd_Status) throws -> Hackutd_Reply {
    return try Hackutd_recycleTestEchoCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func testEcho(_ request: Hackutd_Status, completion: @escaping (Hackutd_Reply?, CallResult) -> Void) throws -> Hackutd_recycleTestEchoCall {
    return try Hackutd_recycleTestEchoCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

